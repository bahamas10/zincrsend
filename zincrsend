#!/usr/bin/env bash
#
# Incremental ZFS send/recv backup script
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: November 20, 2015
# License: MIT

#########
# config
#########

# datasets to send
datasets=(
)
# datasets to send recursively
# even if a dataset does not have any descendant datasets, using a
# recursive zfs send (-R) is preferable because it will result
# in locally removed snapshots being removed on the remote end as well
datasets_recursive=(
	goliath/public
	goliath/minecraft
	goliath/backups
)

# information about the server on the receiving end
remote_server='my-backup-server.example.com'
remote_user='dave'
remote_port='22'
remote_dataset='paper' # zpool name most likely
remote_command_prefix='sudo' # leave blank for nothing
remote_ssh_opts=(-i /root/backup/backup.key) # additional opts to give to ssh

# prefix to use for snapshots created by this script
snapshot_prefix='zincrsend_'

# higher = more output
verbosity_level=0

# function to execute at the end - can be anything
# $1 - exit code - the code that will be used when this script exits
# returns - nothing
end() {
	local exitcode=$1
	local msg=
	case "$exitcode" in
		0) msg='ok';;
		*) msg='failed';;
	esac
	/opt/custom/bin/pushover zincrsend "$msg - took $((SECONDS / 60)) minutes"
}

#############
# end config
#############

debug() {
	((verbosity_level >= 1)) && echo "[DEBUG] $*" >&2
	return 0
}
trace() {
	((verbosity_level >= 2)) && echo "[TRACE] $*" >&2
	return 0
}

SSH() {
	trace "ssh ${remote_ssh_opts[*]} $remote_server $remote_command_prefix $*"
	ssh \
		"${remote_ssh_opts[@]}" \
		-l "$remote_user" \
		-p "$remote_port" \
		"$remote_server" \
		"$remote_command_prefix" \
		"$@"
}

process() {
	local ds=$1

	local snapshot_opts=()
	local send_opts=()
	if [[ -n $2 ]]; then
		# recursive
		snapshot_opts+=(-r)
		send_opts+=(-R)
	fi

	echo ''
	echo "processing dataset: $ds"
	echo ''

	# Step 1 - snapshot locally
	local now=$(date +%s)
	local snap=$ds@${snapshot_prefix}${now}
	echo "creating snapshot locally: $snap"
	if ! zfs snapshot "${snapshot_opts[@]}" "$snap"; then
		echo "[ERROR] failed to snapshot $ds" >&2
		return 1
	fi

	# Step 2 - find the latest remote snapshot
	local rds=$remote_dataset/${ds#*/}
	local inc_snap=
	local inc_opts=()
	debug "fetching latest remote snapshot for dataset: $rds"
	local rsnap=$(SSH zfs list -H -o name,creation -p -t snapshot -r "$rds" | \
		    grep "^$rds@" | \
		    sort -n -k 2 | \
		    tail -1 | \
		    awk '{ print $1 }')

	if [[ -n $rsnap ]]; then
		echo "latest remote snapshot: $rsnap"
		inc_snap=${rsnap#*@}
		# assert that $inc_snap exists locally
		if ! zfs list -t snapshot "$ds@$inc_snap" &>/dev/null; then
			echo "[ERROR] could not find $rsnap locally ($ds@$inc_snap not found)" >&2
			return 1
		fi
		inc_opts+=(-i "@$inc_snap")
	else
		echo "no snapshot found for $ds - doing full send/recv"
	fi

	# Step 3: send from latest remote to newly created
	# or do a full send
	if [[ -n $inc_snap ]]; then
		echo "zfs sending (incremental) @$inc_snap -> $snap to $rds"
	else
		echo "zfs sending $snap to $rds"
	fi
	if ! zfs send "${send_opts[@]}" "${inc_opts[@]}" "$snap" | SSH zfs recv -Fuv "$rds"; then
		echo "[ERROR] failed to send $snap to $remote_server $rds" >&2
		return 1
	fi

	return 0
}

echo "starting on $(date)"

code=0
for ds in "${datasets[@]}"; do
	process "$ds" || code=1
done
for ds in "${datasets_recursive[@]}"; do
	process "$ds" recursive || code=1
done
echo
echo "script ran for ~$((SECONDS / 60)) minutes ($SECONDS seconds)"
echo
end "$code"
echo
echo '---------------------------------'

exit "$code"
